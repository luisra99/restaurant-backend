// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  seed     = "ts-node src/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Concept {
  id            Int       @id @default(autoincrement())
  denomination  String
  details       String?
  fatherId      Int? // Relación opcional para permitir valores nulos
  conceptFather Concept?  @relation("FatherConcept", fields: [fatherId], references: [id])
  childConcept  Concept[] @relation("FatherConcept") // Relación inversa para los conceptos hijos
  OfferArea     Offer[]   @relation(name: "OfferArea")
  OfferCategory Offer[]   @relation(name: "OfferCategory")
  Account       Account[]
}

model TaxDiscounts {
  id      Int     @id @default(autoincrement())
  name    String
  percent Decimal
  status  Boolean @default(false)
  tax     Boolean
}

model Offer {
  id             Int              @id @default(autoincrement())
  name           String
  description    String
  details        String?
  image          String?
  idArea         Int
  idCategory     Int
  price          Decimal
  category       Concept          @relation(name: "OfferCategory", fields: [idCategory], references: [id])
  area           Concept          @relation(name: "OfferArea", fields: [idArea], references: [id])
  accountDetails AccountDetails[] // Relación con los detalles de cuenta
}

model Table {
  id        Int       @id @default(autoincrement())
  name      String
  capacity  Int
  details   String
  reserverd DateTime?
  Account   Account?
}

model Dependent {
  id        Int       @id @default(autoincrement())
  name      String
  Account   Account[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Account {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  idTable     Int?             @unique
  idType      Int              @default(13)
  people      Int?
  idDependent Int?
  taxDiscount Int[]
  active      Boolean          @default(true)
  created     DateTime         @default(now())
  closed      DateTime?
  type        Concept          @relation(fields: [idType], references: [id])
  table       Table?           @relation(fields: [idTable], references: [id])
  dependent   Dependent?       @relation(fields: [idDependent], references: [id])
  payments    Payment[] // Relación con los pagos
  details     AccountDetails[] // Relación con los detalles de la cuenta
}

model AccountDetails {
  id        Int      @id @default(autoincrement())
  idAccount Int
  idOffer   Int
  time      DateTime @default(now())
  quantity  Int // Cantidad del producto ofertado
  account   Account  @relation(fields: [idAccount], references: [id],onDelete: Cascade,onUpdate: Cascade)
  offer     Offer    @relation(fields: [idOffer], references: [id])
}

model Payment {
  id        Int      @id @default(autoincrement())
  idAccount Int
  amount    Decimal
  method    String // Método de pago (efectivo, tarjeta, etc.)
  date      DateTime @default(now())
  account   Account  @relation(fields: [idAccount], references: [id])
}
