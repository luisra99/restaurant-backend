// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  seed     = "ts-node src/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Concept {
  id            String     @id @default(cuid())
  denomination  String
  details       String?
  fatherId      String? // Relación opcional para permitir valores nulos
  conceptFather Concept?   @relation("FatherConcept", fields: [fatherId], references: [id])
  childConcept  Concept[]  @relation("FatherConcept") // Relación inversa para los conceptos hijos
  OfferArea     Offer[]    @relation(name: "OfferArea")
  OfferCategory Offer[]    @relation(name: "OfferCategory")
  Account       Account[]
  Type          Payment[]  @relation(name: "TypePayment")
  Payment       Payment[]  @relation(name: "DivisaPayment")
  Divisa        Withdraw[] @relation(name: "DivisaWithdraw")
  Withdraw      Withdraw[] @relation(name: "WithdrawConcept")
  DivisaIncome  Income[]   @relation(name: "DivisaIncome")
  IncomeConcept Income[]   @relation(name: "IncomeConcept")

  InventoryMovement InventoryMovement[]

  CashFlow CashFlow[]
}

model TaxDiscounts {
  id      String  @id @default(cuid())
  name    String
  percent Decimal @db.Decimal(9, 2)
  status  Boolean @default(false)
  tax     Boolean
}

model Offer {
  id             String           @id @default(cuid())
  name           String
  description    String
  details        String?
  image          String?
  idArea         String
  idCategory     String
  price          Decimal          @db.Decimal(9, 2)
  category       Concept          @relation(name: "OfferCategory", fields: [idCategory], references: [id])
  area           Concept          @relation(name: "OfferArea", fields: [idArea], references: [id])
  accountDetails AccountDetails[] // Relación con los detalles de cuenta
}

model Table {
  id       String    @id @default(cuid())
  name     String
  capacity Int
  details  String
  reserved DateTime?
  Account  Account[]
}

model Dependent {
  id        String     @id @default(cuid())
  name      String
  Account   Account[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Operator  Operator[]
}

model Account {
  id          String           @id @default(cuid())
  name        String
  description String?
  idTable     String?
  idType      String
  people      Int?
  idDependent String?
  taxDiscount String[]
  active      Boolean          @default(true)
  created     DateTime         @default(now())
  closed      DateTime?
  type        Concept          @relation(fields: [idType], references: [id])
  table       Table?           @relation(fields: [idTable], references: [id])
  dependent   Dependent?       @relation(fields: [idDependent], references: [id])
  payments    Payment[] // Relación con los pagos
  details     AccountDetails[] // Relación con los detalles de la cuenta
  Income      Income[]         @relation(name: "Propina")
}

model AccountDetails {
  id              String           @id @default(cuid())
  idAccount       String
  idOffer         String
  time            DateTime         @updatedAt
  house           Int              @default(0)
  marchado        DateTime?
  terminado       DateTime?
  discount        Int?
  quantity        Int // Cantidad del producto ofertado
  idAccountDetail String?
  account         Account          @relation(fields: [idAccount], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountDetail   AccountDetails?  @relation(name: "accountDetails", fields: [idAccountDetail], references: [id], onDelete: Cascade, onUpdate: Cascade) //Para los agregos
  offer           Offer            @relation(fields: [idOffer], references: [id])
  AccountDetails  AccountDetails[] @relation(name: "accountDetails")
}

model Payment {
  id        String   @id @default(cuid())
  idAccount String
  idMethod  String // Método de pago (efectivo, tarjeta, etc.)
  idDivisa  String? // Método de pago (efectivo, tarjeta, etc.)
  amount    Decimal  @db.Decimal(9, 2)
  date      DateTime @default(now())
  divisa    Concept? @relation(name: "DivisaPayment", fields: [idDivisa], references: [id])
  type      Concept  @relation(name: "TypePayment", fields: [idMethod], references: [id])
  account   Account  @relation(fields: [idAccount], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Withdraw {
  id         String   @id @default(cuid())
  idConcepto String
  idDivisa   String?
  amount     Decimal  @db.Decimal(9, 2)
  date       DateTime @default(now())
  divisa     Concept? @relation(name: "DivisaWithdraw", fields: [idDivisa], references: [id])
  concept    Concept  @relation(name: "WithdrawConcept", fields: [idConcepto], references: [id])
}

model Income {
  id         String   @id @default(cuid())
  idConcepto String
  idDivisa   String?
  idAccount  String?
  amount     Decimal  @db.Decimal(9, 2)
  date       DateTime @default(now())
  account    Account? @relation(name: "Propina", fields: [idAccount], references: [id])
  divisa     Concept? @relation(name: "DivisaIncome", fields: [idDivisa], references: [id])
  concept    Concept  @relation(name: "IncomeConcept", fields: [idConcepto], references: [id])
}

model Operator {
  id          String     @id @default(cuid())
  initialCash Decimal?   @db.Decimal(9, 2)
  finalCash   Decimal?   @db.Decimal(9, 2)
  idOperator  String?
  dependent   Dependent? @relation(fields: [idOperator], references: [id])
}

model ErrorLogs {
  id    DateTime @id @default(now())
  info  String?
  error String?
}

model User {
  id                           String              @id @default(cuid())
  username                     String              @unique
  password                     String
  idRole                       String?
  role                         Role?               @relation(fields: [idRole], references: [id])
  permissions                  UserPermission[]
  createdAt                    DateTime            @default(now())
  updatedAt                    DateTime            @updatedAt
  InventoryMovementSupervisor  InventoryMovement[] @relation("supervisor")
  InventoryMovementResponsable InventoryMovement[] @relation("responsable")

  CashFlowResponsable CashFlow[] @relation("responsable")

  CashFlowSupervisor CashFlow[] @relation("supervisor")
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  permissions RolePermission[]
  users       User[]
}

model Permission {
  id     String           @id @default(cuid())
  action String           @unique
  name   String           @unique
  roles  RolePermission[]
  users  UserPermission[]
}

model UserPermission {
  id           String     @id @default(cuid())
  userId       String
  permissionId String
  user         User       @relation(fields: [userId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([userId, permissionId])
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

model Area {
  id                    String              @id @default(cuid())
  name                  String
  localId               String
  local                 Local               @relation(fields: [localId], references: [id])
  inventory             InventoryItem[]
  InventoryMovementFrom InventoryMovement[] @relation("movementsFrom")
  InventoryMovementTo   InventoryMovement[] @relation("movementsTo")
}

model Local {
  id      String @id @default(cuid())
  name    String
  address String
  areas   Area[]
}

model InventoryItem {
  id                String              @id @default(cuid())
  name              String
  quantity          Float
  unitOfMeasureId   String
  unitOfMeasure     UnitOfMeasure       @relation(fields: [unitOfMeasureId], references: [id])
  Area              Area[]
  InventoryMovement InventoryMovement[]
}

model InventoryMovement {
  id                 String            @id @default(cuid())
  movementDate       DateTime          @default(now())
  movementTypeId     String
  itemId             String
  quantity           Float
  unitOfMesure       String
  unitPrice          Float
  paidPrice          Float
  supplierCustomerId String?
  fromAreaId         String
  toAreaId           String
  userId             String?
  details            String
  supervisorUserId   String?
  approved           Boolean
  fromArea           Area              @relation("movementsFrom", fields: [fromAreaId], references: [id])
  toArea             Area              @relation("movementsTo", fields: [toAreaId], references: [id])
  item               InventoryItem     @relation(fields: [itemId], references: [id])
  movementType       Concept           @relation(fields: [movementTypeId], references: [id])
  supplierCustomer   SupplierCustomer? @relation(fields: [supplierCustomerId], references: [id])
  user               User?             @relation("responsable", fields: [userId], references: [id])
  supervisorUser     User?             @relation("supervisor", fields: [supervisorUserId], references: [id])
}

model CashFlow {
  id               String   @id @default(cuid())
  amount           Float
  movementTypeId   String
  movementType     Concept  @relation(fields: [movementTypeId], references: [id])
  date             DateTime @default(now())
  user             User?    @relation("responsable", fields: [userId], references: [id])
  userId           String?
  supervisorUser   User?    @relation("supervisor", fields: [supervisorUserId], references: [id])
  supervisorUserId String?
  description      String?
}

model SupplierCustomer {
  id                String              @id @default(cuid())
  name              String
  email             String?
  phone             String?
  address           String?
  InventoryMovement InventoryMovement[]
}

model UnitOfMeasure {
  id             String          @id @default(cuid())
  name           String
  abbreviation   String
  inventoryItems InventoryItem[]
}
